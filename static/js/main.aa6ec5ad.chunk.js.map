{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","redux/profileReducer.ts","redux/dialogsReducer.ts","redux/sidebarReducer.ts","redux/state.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","App.tsx","index.tsx"],"names":["module","exports","Header","className","cl","header","src","alt","Navbar","nav","item","to","activeClassName","active","Post","props","message","likesCount","id","profileReducer","state","action","type","newPost","Date","getTime","newPostsText","posts","push","newText","dialogsReducer","newMessage","newMessageText","messages","sidebarReducer","store","_state","profilePage","dialogsPage","dialogs","name","sidebar","_rerenderEntireTree","console","log","getState","this","subscribe","observer","dispatch","MyPosts","postsElements","map","p","newPostElement","React","createRef","onChange","current","value","updateNewPostTextAC","ref","onClick","newPostText","addPostAC","ProfileInfo","descriptionBlock","Profile","DialogItem","path","dialog","Message","Dialogs","dialogsElements","d","messagesElements","m","newMessageElement","dialogsItems","updateNewMessageTextAC","placeholder","addMessageAC","App","render","bind","rerenderEntireTree","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.aa6ec5ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1fQ5n\",\"item\":\"Navbar_item__5b7J1\",\"active\":\"Navbar_active__1P0hO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__29Q4B\",\"dialogsItems\":\"Dialogs_dialogsItems__1BXBS\",\"active\":\"Dialogs_active__38AHz\",\"dialog\":\"Dialogs_dialog__2QAT_\",\"messages\":\"Dialogs_messages__1AYfj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3b3mg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__3m-Pk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2SPc4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__18mU5\"};","import React from 'react';\r\nimport cl from './Header.module.css';\r\n\r\nconst Header = () => {\r\n  return <header className={cl.header}>\r\n    <img src=\"https://iconsplace.com/wp-content/uploads/_icons/40e0d0/256/png/facebook-2-icon-17-256.png\" alt=\"logo\"/>\r\n  </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport cl from './Navbar.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n const Navbar = () => {\r\n   return( \r\n   <nav className={cl.nav}>\r\n     <div>\r\n       <div className={cl.item}><NavLink to=\"/profile\" activeClassName={cl.active}>Profile</NavLink></div>\r\n       <div className={cl.item}><NavLink to=\"/dialogs\" activeClassName={cl.active}>Dialogs</NavLink></div>\r\n       <div className={cl.item}><NavLink to=\"/news\" activeClassName={cl.active}>News</NavLink></div>\r\n       <div className={cl.item}><NavLink to=\"/music\" activeClassName={cl.active}>Music</NavLink></div>\r\n       <div className={cl.item}><NavLink to=\"/settings\" activeClassName={cl.active}>Settings</NavLink></div>\r\n     </div>\r\n   </nav>\r\n   )\r\n }\r\n\r\n export default Navbar; ","import React from 'react';\r\nimport cl from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={cl.item}>\r\n      <img src=\"https://klike.net/uploads/posts/2019-02/1550472288_1.jpg\" alt=\"ava\" />\r\n      {props.message}\r\n      <div>\r\n        <span>like {props.likesCount}</span>\r\n        <span>-   time {props.id}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import {ActionTypes, PostType, ProfilePageType} from './state';\r\n\r\nconst AddPost = 'ADD-POST';\r\nconst UpdateNewPostText = 'UPDATE-NEW-POST-TEXT';\r\n\r\nconst profileReducer = (state: ProfilePageType, action: ActionTypes ) => {\r\n    switch (action.type) {\r\n        case AddPost:\r\n            let newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostsText,\r\n                likesCount: 0,\r\n            };\r\n            state.posts.push(newPost);\r\n            state.newPostsText = '';\r\n            return state;\r\n        case UpdateNewPostText:\r\n            state.newPostsText = action.newText;\r\n            return state;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default profileReducer","import {ActionTypes, DialogPageType, MessageType} from './state';\r\n\r\nconst AddMessage = 'ADD-MESSAGE';\r\nconst UpdateNewMessageText = 'UPDATE-NEW-MESSAGE-TEXT'\r\n\r\nconst dialogsReducer = (state: DialogPageType, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case AddMessage:\r\n            let newMessage: MessageType = {\r\n                id: 5,\r\n                message: action.newMessageText,\r\n            }\r\n\r\n            state.messages.push(newMessage);\r\n            state.newMessageText = '';\r\n            return state\r\n        case UpdateNewMessageText:\r\n            state.newMessageText = action.newMessage;\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default dialogsReducer","import {ActionTypes, SidebarType} from './state';\r\n\r\n\r\nconst sidebarReducer = (state: SidebarType, action: ActionTypes) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer","import profileReducer from './profileReducer';\r\nimport dialogsReducer from './dialogsReducer';\r\nimport sidebarReducer from './sidebarReducer';\r\n\r\n\r\nexport type MessageType = {\r\n  id: number\r\n  message: string\r\n}\r\nexport type NewPostsTextType = string\r\nexport type DialogType = {\r\n  id: number\r\n  name: string\r\n}\r\nexport type PostType = {\r\n  id: number\r\n  message: string\r\n  likesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n  posts: Array<PostType>\r\n  newPostsText: NewPostsTextType\r\n}\r\nexport type DialogPageType = {\r\n  dialogs: Array<DialogType>\r\n  messages: Array<MessageType>\r\n  newMessageText: string\r\n}\r\nexport type SidebarType = {}\r\nexport type RootStateType = {\r\n  profilePage: ProfilePageType\r\n  dialogsPage: DialogPageType\r\n  sidebar: SidebarType\r\n}\r\n\r\nexport type StoreType = {\r\n  _state: RootStateType\r\n  getState: () => RootStateType\r\n  _rerenderEntireTree: () => void\r\n  subscribe: (observer: () => void) => void\r\n  dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nexport type ActionTypes = ReturnType<typeof addPostAC>\r\n  | ReturnType<typeof addMessageAC>\r\n  | ReturnType<typeof updateNewPostTextAC>\r\n  | ReturnType<typeof updateNewMessageTextAC>\r\n;\r\n\r\nlet store: StoreType = {\r\n  _state: {\r\n    profilePage: {\r\n      posts: [\r\n        { id: 0, message: \"Привет, как дела\", likesCount: 10 },\r\n        { id: 1, message: \"Что ты такое\", likesCount: 88 },\r\n      ],\r\n      newPostsText: '',\r\n    },\r\n    dialogsPage: {\r\n      dialogs: [\r\n        { id: 1, name: \"Tim\" },\r\n        { id: 2, name: \"Mary\" },\r\n        { id: 3, name: \"Fima\" },\r\n        { id: 4, name: \"Yan\" },\r\n        { id: 5, name: \"Vovan\" },\r\n        { id: 6, name: \"Dimych\" },\r\n      ],\r\n      messages: [\r\n        { id: 1, message: \"Tim привет, а вот и мы\" },\r\n        { id: 2, message: \"Mary привет, а вот и мы\" },\r\n        { id: 3, message: \"Fima привет, а вот и мы\" },\r\n        { id: 4, message: \"Yan привет, а вот и мы\" },\r\n        { id: 5, message: \"Vovan привет, а вот и мы\" },\r\n        { id: 6, message: \"Dimych привет, а вот и мы\" },\r\n      ],\r\n      newMessageText: '',\r\n    },\r\n    sidebar: {},\r\n  },\r\n  _rerenderEntireTree() {\r\n    console.log('state changed')\r\n  },\r\n  getState() {\r\n    return this._state\r\n  },\r\n  subscribe(observer) {\r\n    this._rerenderEntireTree = observer\r\n  },\r\n  dispatch(action) {\r\n    this._state.profilePage = profileReducer(this._state.profilePage, action);\r\n    this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action);\r\n    this._state.sidebar = sidebarReducer(this._state.sidebar, action);\r\n    this._rerenderEntireTree();\r\n  },\r\n}\r\n\r\nexport const addPostAC = (newPostText: string) => {\r\n  return {\r\n    type: 'ADD-POST', newPostsText: newPostText\r\n  } as const\r\n};\r\n\r\nexport const addMessageAC = (newMessageText: string) => {\r\n  return {\r\n    type: 'ADD-MESSAGE', newMessageText: newMessageText\r\n  } as const\r\n};\r\n\r\nexport const updateNewPostTextAC = (newText: string) => {\r\n  return {\r\n    type: 'UPDATE-NEW-POST-TEXT', newText: newText\r\n  } as const\r\n};\r\n\r\nexport const updateNewMessageTextAC = (newMessage: string) => {\r\n  return {\r\n    type: 'UPDATE-NEW-MESSAGE-TEXT', newMessage: newMessage\r\n  } as const\r\n};\r\n\r\nexport default store;","import React from 'react';\r\nimport cl from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {ActionTypes, addPostAC, NewPostsTextType, PostType, updateNewPostTextAC} from '../../../redux/state';\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    newPostsText: NewPostsTextType\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} id={p.id}/>)\r\n\r\n    let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let addPost = () => {\r\n        if (newPostElement.current) {\r\n            if (newPostElement.current.value !== '' && newPostElement.current.value !== 'sex') {\r\n               let newPostText=newPostElement.current.value\r\n                props.dispatch(addPostAC(newPostText));\r\n            }\r\n        }\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        let newText = newPostElement.current ? newPostElement.current.value : '';\r\n        props.dispatch(updateNewPostTextAC(newText));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            My posts\r\n            <div>\r\n                <textarea onChange={onPostChange} ref={newPostElement} value={props.newPostsText}/><br/>\r\n                <button onClick={addPost}>Add post\r\n                </button>\r\n            </div>\r\n            <div className={cl.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport cl from './ProfileInfo.module.css'\r\n\r\nconst ProfileInfo = () => {\r\n  return (\r\n    <div >\r\n      <div>\r\n        <img src=\"https://www.cjnews.com/wp-content/uploads/2020/03/Tower-of-David-Museum-f.jpg\" alt=\"img\" />\r\n        </div>\r\n      <div className={cl.descriptionBlock}>\r\n        ava + description\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {ActionTypes, ProfilePageType} from '../../redux/state';\r\n\r\ntype PropsType = {\r\n    profilePage: ProfilePageType\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInfo />\r\n      <MyPosts posts={props.profilePage.posts}\r\n               newPostsText={props.profilePage.newPostsText}\r\n               dispatch={props.dispatch}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport cl from '../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DialogType} from \"../../../redux/state\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n\r\n  let path = \"/dialogs/\" + props.id\r\n\r\n  return (\r\n    <div className={cl.dialog}>\r\n      <NavLink to={path} activeClassName={cl.active}> {props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport cl from '../Dialogs.module.css'\r\nimport {MessageType} from '../../../redux/state';\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={cl.dialog}>{props.message}</div>\r\n  )\r\n}\r\n\r\n\r\nexport default Message","import React from 'react';\r\nimport cl from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {ActionTypes, addMessageAC, DialogPageType, updateNewMessageTextAC} from '../../redux/state';\r\n\r\ntype PropsType = {\r\n    dialogsPage: DialogPageType\r\n    dispatch: (action: ActionTypes) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message}/>)\r\n\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let newMessage = props.dialogsPage.newMessageText\r\n\r\n    let addMessage = () => {\r\n        if (newMessageElement.current) {\r\n            if (newMessageElement.current.value !== '') {\r\n                let newMessageText = newMessageElement.current.value\r\n                props.dispatch(addMessageAC(newMessageText))\r\n            }\r\n        }\r\n        ;\r\n    }\r\n\r\n    let onMessageChange = () => {\r\n        let newMessage = newMessageElement.current ? newMessageElement.current.value : '';\r\n        props.dispatch(updateNewMessageTextAC(newMessage))\r\n    }\r\n\r\n    return (\r\n        <div className={cl.dialogs}>\r\n            <div className={cl.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={cl.messages}>\r\n                {messagesElements}\r\n                <textarea onChange={onMessageChange} ref={newMessageElement} value={newMessage} placeholder={'Your message'}></textarea> <br/>\r\n                <button onClick={addMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Navbar from './components/Navbar/Navbar';\nimport Profile from './components/Profile/Profile';\nimport Dialogs from './components/Dialogs/Dialogs';\nimport {Route} from 'react-router-dom'\nimport store, {ActionTypes, StoreType} from './redux/state';\n\ntype PropsType = {\n    store: StoreType\n}\n\nconst App: React.FC<PropsType> = (props) => {\n\n    return (\n        <div className=\"app-wrapper\">\n            <Header/>\n            <Navbar/>\n            <div className=\"app-wrapper-content\">\n                <Route path={'/profile'} render={() => <Profile\n                    profilePage={props.store._state.profilePage}\n                    dispatch={props.store.dispatch.bind(store)}/>}/>\n                <Route path={'/dialogs'} render={() => <Dialogs\n                    dialogsPage={props.store._state.dialogsPage}\n                    dispatch={props.store.dispatch.bind(store)}/>}/>\n            </div>\n        </div>\n    )\n}\n\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport React from 'react';\nimport store from './redux/state';\n\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <App store={store} />\n        </BrowserRouter>, document.getElementById('root'));\n};\n\nrerenderEntireTree();\n\nstore.subscribe(rerenderEntireTree);"],"sourceRoot":""}